#!/usr/bin/env ruby
#
# rexe - Ruby Command Line Executor Filter
#
# Inspired by https://github.com/thisredone/rb

require 'bundler'
require 'date'
require 'optparse'
require 'ostruct'
require 'shellwords'

class Rexe < Struct.new(
    :input_format,
    :input_mode,
    :loads,
    :output_format,
    :requires,
    :log_format,
    :noop)


  VERSION = '0.12.0'


  def initialize
    clear_options
  end


  def input_modes
    @input_modes ||= {
        'l' => :line,
        'e' => :enumerator,
        'b' => :one_big_string,
        'n' => :no_input
    }
  end


  def input_formats
    @input_formats ||=  {
        'j' => :json,
        'm' => :marshal,
        'n' => :none,
        'y' => :yaml,
    }
  end


  def input_parsers
    @input_parsers ||= {
        json:    ->(obj)  { JSON.parse(obj) },
        marshal: ->(obj)  { Marshal.load(obj) },
        none:    ->(obj)  { obj },
        yaml:    ->(obj)  { YAML.load(obj) },
    }
  end


  def output_formats
    @output_formats ||= {
        'a' => :awesome_print,
        'i' => :inspect,
        'j' => :json,
        'J' => :pretty_json,
        'm' => :marshal,
        'n' => :no_output,
        'p' => :puts,         # default
        'P' => :pretty_print,
        's' => :to_s,
        'y' => :yaml,
    }
  end


  def formatters
    @formatters ||=  {
        awesome_print: ->(obj)  { obj.ai },
        inspect:       ->(obj)  { obj.inspect + "\n" },
        json:          ->(obj)  { obj.to_json },
        marshal:       ->(obj)  { Marshal.dump(obj) },
        no_output:     ->(_obj) { nil },
        pretty_json:   ->(obj)  { JSON.pretty_generate(obj) },
        pretty_print:  ->(obj)  { obj.pretty_inspect },
        puts:          ->(obj)  { sio = StringIO.new; sio.puts(obj); sio.string },   # default
        to_s:          ->(obj)  { obj.to_s + "\n" },
        yaml:          ->(obj)  { obj.to_yaml },
    }
  end


  # Requires the 'require' appropriate to the specified format.
  def require_format_require(format)
    @format_requires ||= {
        json:          'json',
        pretty_json:   'json',
        awesome_print: 'awesome_print',
        pretty_print:  'pp',
        yaml:          'yaml'
    }
    r = @format_requires[format]
    require(r) if r
  end


  # Used as an initializer and also when `-c` is specified on the command line.
  def clear_options
    self.input_format  = :none
    self.input_mode    = :no_input
    self.output_format = :puts
    self.loads         = []
    self.requires      = []
    self.log_format    = :none
    self.noop          = false
  end


  def help_text
    <<~HEREDOC

    rexe -- Ruby Command Line Executor/Filter -- v#{VERSION} -- https://github.com/keithrbennett/rexe

    Executes Ruby code on the command line, optionally taking standard input and writing to standard output.

    rexe [options] 'Ruby source code'

    Options:

    -c  --clear_options        Clear all previous command line options specified up to now
    -g  --log_format FORMAT    Log format, logs to stderr, defaults to none (see -o for format options)
    -h, --help                 Print help and exit
    -i, --input_format FORMAT  Input format (defaults to none)
                                 -ij  JSON
                                 -im  Marshal
                                 -in  None
                                 -iy  YAML
    -l, --load RUBY_FILE(S)    Ruby file(s) to load, comma separated, or ! to clear
    -m, --input_mode MODE      Mode with which to handle input (i.e. what `self` will be in your code):
                                 -ml  line mode; each line is ingested as a separate string
                                 -me  enumerator mode
                                 -mb  big string mode; all lines combined into single multiline string
                                 -mn  (default) no input mode; no special handling of input; self is an Object.new 
    -n, --[no-]noop            Do not execute the code (useful with -g); the following are valid:
                                 -n no, -n yes, -n false, -n true, -n n, -n y, -n +, but not -n -
    -o, --output_format FORMAT Output format (defaults to puts):
                                 -oi  Inspect
                                 -oj  JSON
                                 -oJ  Pretty JSON
                                 -om  Marshal
                                 -on  No Output
                                 -op  Puts (default)
                                 -os  to_s
                                 -oy  YAML
    -r, --require REQUIRE(S)   Gems and built-in libraries to require, comma separated, or ! to clear

    If there is an .rexerc file in your home directory, it will be run as Ruby code 
    before processing the input.

    If there is a REXE_OPTIONS environment variable, its content will be prepended to the command line
    so that you can specify options implicitly (e.g. `export REXE_OPTIONS="-r awesome_print,yaml"`)

    HEREDOC
  end


  # Inserts contents of REXE_OPTIONS environment variable at the beginning of ARGV.
  def prepend_environment_options
    env_opt_string = ENV['REXE_OPTIONS']
    if env_opt_string
      args_to_prepend = Shellwords.shellsplit(env_opt_string)
      ARGV.unshift(args_to_prepend).flatten!
    end
  end


  # Using 'optparse', parses the command line.
  # Settings go into this instance's properties (see Struct declaration).
  def parse_command_line

    OptionParser.new do |parser|

      parser.on('-g', '--log_format FORMAT', 'Log format, logs to stderr, defaults to none (see -o for format options)') do |v|
        self.log_format = output_formats[v]
        if self.log_format.nil?
          puts help_text
          raise "Output mode was '#{v}' but must be one of #{output_formats.keys}."
        end
      end

      parser.on("-h", "--help", "Show help") do |_help_requested|
        puts help_text
        exit
      end

      parser.on('-i', '--input_format FORMAT',
                'Mode with which to parse input values (n = none (default), j = JSON, m = Marshal, y = YAML') do |v|

        self.input_format = input_formats[v]
        if self.input_format.nil?
          puts help_text
          raise "Input mode was '#{v}' but must be one of #{input_formats.keys}."
        end
      end

      parser.on('-l', '--load RUBY_FILE(S)', 'Ruby file(s) to load, comma separated, or ! to clear') do |v|
        if v == '!'
          self.loads.clear
        else
          loadfiles = v.split(',').map(&:strip)
          existent, nonexistent = loadfiles.partition { |filespec| File.exists?(filespec) }
          if nonexistent.any?
            raise("\nDid not find the following files to load: #{nonexistent.to_s}\n\n")
          else
            existent.each { |filespec| self.loads << filespec }
          end
        end
      end

      parser.on('-m', '--input_mode MODE',
                'Mode with which to handle input (-ml, -me, -mb, -mn (default)') do |v|

        self.input_mode = input_modes[v]
        if self.input_mode.nil?
          puts help_text
          raise "Input mode was '#{v}' but must be one of #{input_modes.keys}."
        end
      end

      parser.on('-o', '--output_format FORMAT',
                'Mode with which to format values for output (`-o` + [aijJmnpsy])') do |v|

        self.output_format = output_formats[v]
        if self.output_format.nil?
          puts help_text
          raise "Output mode was '#{v}' but must be one of #{output_formats.keys}."
        end
      end

      parser.on('-r', '--require REQUIRE(S)',
                'Gems and built-in libraries (e.g. shellwords, yaml) to require, comma separated, or ! to clear') do |v|
        if v == '!'
          self.requires.clear
        else
          v.split(',').map(&:strip).each { |r| self.requires << r }
        end
      end

      parser.on('-c', '--clear_options', "Clear all previous command line options") do |v|
        clear_options
      end

      # See https://stackoverflow.com/questions/54576873/ruby-optionparser-short-code-for-boolean-option
      # for an excellent explanation of this optparse incantation.
      # According to the answer, valid options are:
      # -n no, -n yes, -n false, -n true, -n n, -n y, -n +, but not -n -.
      parser.on('-n', '--[no-]noop [FLAG]', TrueClass, "Do not execute the code (useful with -g)") do |v|
        self.noop = (v.nil? ? true : v)
      end

      parser.on('-v', '--version', 'Print version') do
        puts VERSION
        exit
      end
    end.parse!

    requires.uniq!
    loads.uniq!

  end


  def load_global_config_if_exists
    filespec = File.join(Dir.home, '.rexerc')
    load(filespec) if File.exists?(filespec)
  end


  # Executes the user specified code in the manner appropriate to the input mode.
  # Performs any optionally specified parsing on input and formatting on output.
  def execute(eval_context_object, code)
    if input_format != :none && input_mode != :no_input
      eval_context_object = input_parser.(eval_context_object)
    end

    value = eval_context_object.instance_eval(&code)
    unless output_format == :no_output
      print output_formatter.(value)
    end
  rescue Errno::EPIPE
    exit(-13)
  end


  # This class' entry point.
  def call

    init_rexe_context = ->(start_time, user_source_code) do
      # This global $RC (Rexe Context) OpenStruct is available in your user code.
      # In order to make it possible to access this hash in your loaded files, we are not initializing
      # the hash here; instead we add key/value pairs to it. This way, you can initialize a hash yourself
      # in your loaded code.
      $RC ||= OpenStruct.new
      $RC.count         = 0
      $RC.rexe_version  = VERSION
      $RC.start_time    = start_time.iso8601
      $RC.source_code   = user_source_code
      $RC.options       = self.to_h

      def $RC.i; count end  # `i` aliases `count` so you can more concisely get the count in your user code
    end


    create_callable = ->(user_source_code) do
      if user_source_code.empty?
        STDERR.puts "No source code provided.  Use -h to display help."
        exit(-1)
      end

      eval("Proc.new { #{user_source_code} }")
    end


    lookup_action = ->(mode, callable) do
      {
          line:           -> { STDIN.each { |l| execute(l.chomp, callable);            $RC.count += 1 } },
          enumerator:     -> { execute(STDIN.each_line, callable);                     $RC.count += 1 },
          one_big_string: -> { big_string = STDIN.read; execute(big_string, callable); $RC.count += 1 },
          no_input:       -> { execute(Object.new, callable) }
      }[mode]
    end


    start_time = DateTime.now

    prepend_environment_options
    parse_command_line

    requires.each { |r| require(r) }
    load_global_config_if_exists
    loads.each { |file| load(file) }

    user_source_code = ARGV.join(' ')
    init_rexe_context.(DateTime.now, user_source_code)
    callable = create_callable.(user_source_code)

    lookup_action.(input_mode, callable).() unless self.noop

    if log_format != :none
      $RC.duration_secs = Time.now - start_time.to_time
      STDERR.puts(log_formatter.($RC.to_h))
    end
  end
end


def input_parser
  if @input_parser.nil?
    require_format_require(input_format)
    @input_parser = input_parsers[input_format]
  end
  @input_parser
end


def output_formatter
  if @output_formatter.nil?
    require_format_require(output_format)
    @output_formatter = formatters[output_format]
  end
  @output_formatter
end


def log_formatter
  if @log_formatter.nil?
    require_format_require(log_format)
    @log_formatter = formatters[log_format]
  end
  @log_formatter
end


# This is needed because the gemspec file loads this file to access Rexe::VERSION
# and must not have it run at that time:
called_as_script = (File.basename($0) == File.basename(__FILE__))
if called_as_script
  Bundler.with_clean_env { Rexe.new.call }
end
